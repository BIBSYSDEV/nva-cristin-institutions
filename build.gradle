plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

repositories {
    mavenCentral()
}


dependencies {
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.10'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0-M1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.0'
    shadowJar {
        archiveClassifier.set('')
        zip64 true
    }
}


test {
    failFast = true
    finalizedBy jacocoTestReport
}

// We don't want a jar, just a fatJar
jar.enabled = false
project.tasks.build.dependsOn project.tasks.shadowJar

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'no/**')
        }))
    }
}

jacoco {
    toolVersion = "0.8.5"
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'no/**')
        }))
    }

    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }

}

